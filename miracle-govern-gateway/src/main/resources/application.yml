server:
  port: 12001
  servlet:
    context-path: /api
spring:
  application:
    name: miracle-govern-gateway
  redis:
    host: ${REDIS_HOST:127.0.0.1}
    port: ${REDIS_PORT:6379}
    timeout: 5000 #连接超时 毫秒
    jedis:
      pool:
        maxActive: 3
        maxIdle: 3
        minIdle: 1
        maxWait: -1 #连接池最大等行时间 -1没有限制
#------------------------------eureka-------------------------------------------
eureka:
  client:
    healthcheck:
      enabled: true #开启服务检测
    registerWithEureka: true #服务注册开关
    fetchRegistry: true #服务发现开关
    serviceUrl: #Eureka客户端与Eureka服务端进行交互的地址，多个中间用逗号分隔
      defaultZone: ${EUREKA_SERVER:http://admin:12345@127.0.0.1:10001/eureka,http://admin:12345@127.0.0.1:10002/eureka}
  instance:
    prefer-ip-address:  true  #将自己的ip地址注册到Eureka服务中
    ip-address: 127.0.0.1
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port} #指定实例id
    lease-renewal-interval-in-seconds: 10 #Client发给Server的心跳频率
    lease-expiration-duration-in-seconds: 10 #Server收到上一次心跳时间之后，等待下一次心跳的超时时间。如果在时间内没有收到，则进行服务剔除
#------------------------------ribbon-------------------------------------------
ribbon:
  MaxAutoRetries: 2 #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试，如果eureka中找不到服务则直接走断路器
  MaxAutoRetriesNextServer: 3 #切换实例的重试次数
  OkToRetryOnAllOperations: false  #对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false
  ConnectTimeout: 5000  #请求连接的超时时间
  ReadTimeout: 6000 #请求处理的超时时间
#------------------------------zuul-------------------------------------------
zuul:
  # 添加host头部
  #add-host-header: true
  routes:
    manage-user:
      path: /manage/user/**
      # 微服务名称，网关会从eureka中获取该服务名称下的服务实例的地址
      serviceId: miracle-service-manage-user
      # 例子：将请求转发到http://localhost:120001/api/manage/user/test
      #url: http://www.baidu.com #也可指定url，此url也可以是外网地址
      #true：http://localhost:120001/api/manage/user/test 代理转发时去掉前缀(test)，false:代理转发时不去掉前缀(manage/user/test)
      strip-prefix: false
      sensitiveHeaders: #默认zuul会屏蔽cookie，cookie不会传到下游服务，这里设置为空则取消默认的黑名单，如果设置了具体的头信息则不会传到下游服务
      #ignoredHeaders: 默认为空表示不过虑任何头
    manage-order:  #路由名称，名称任意，保持所有路由名称唯一
      path: /manage/order/**
      serviceId: miracle-service-manage-order #指定服务id，从Eureka中找到服务的ip和端口
      strip-prefix: false
      sensitiveHeaders:
    # auth service
    manage-auth:  #路由名称，名称任意，保持所有路由名称唯一
      path: /auth/**
      serviceId: miracle-service-manage-auth #指定服务id，从Eureka中找到服务的ip和端口
      strip-prefix: false
      sensitiveHeaders:
  ratelimit:
    key-prefix: gateway-rate-limit-prefix #按粒度拆分的临时变量key前缀
    enabled: true # 启用开关
    repository: redis
    behind-proxy: true # 在代理之后
    default-policy: # 全局限流策略，可单独细化到服务粒度
      limit: 2 # 在一个单位时间窗口的请求数量
      quota: 1 # 在一个单位时间窗口的请求时间限制
      refresh-interval: 3 #单位时间窗口
      type:
        - url #可指定url粒度
        - user #可指定用户粒度
        - origin #可指定客户端地址粒度
# login ignore urlK
auth:
  ignored-url-patterns: /auth/**,/actuator/**,/manage/user/test/test1,/manage/user/test/test2
#---redisson---
#集群模式
#redisson:
#  client-name: myclient
#  password:
#  node-addresses: redis://192.168.1.103:7000,redis://192.168.1.103:7001,redis://192.168.1.103:7002,redis://192.168.1.103:7003,redis://192.168.1.103:7004,redis://192.168.1.103:7005
redisson:
  address: redis://127.0.0.1:6379
  password:
